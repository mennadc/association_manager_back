type Query {
    getAssociations: [AssociationOutput]
    getUsers: [UserOutput]
    getEvents: [EventOutput]
    getUser(id: String!): UserOutput
    getAssociationById(id: String!): AssociationOutput
    getEventById(id: String!): EventOutput
}

type Mutation {
    createUser(userDto: UserInput!): UserOutput!
    createAssociation(associationDto: AssociationInput!): AssociationOutput!
    createEvent(eventDto: EventInput!): EventOutput!
    updateUser(id: String!, userDto: UserInput!): UserOutput!
    deleteUser(id: String!): Boolean
}

type AssociationOutput {
    id: String
    name: String
    activity: String
    funds: Int
    founder: String
}

type UserOutput {
    id: String
    firstName: String
    lastName: String
    userName: String
    email: String
    password: String
    wallet: Int
    associationId: String
}

type EventOutput {
    id: String
    title: String
    description: String
    budget: Int
    associationId: String
    organizer: String
}

input AssociationInput {
    name: String
    activity: String
    funds: Int
    founder: String
}

input UserInput {
    firstName: String
    lastName: String
    userName: String
    email: String
    password: String
    wallet: Int
    associationId: String
}

input EventInput {
    title: String
    description: String
    budget: Int
    associationId: String
    organizer: String
}
